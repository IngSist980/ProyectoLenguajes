
CREATE TABLE CategoriaProducto (
    ID_Categoria NUMBER NOT NULL GENERATED BY DEFAULT ON NULL AS IDENTITY,
    NombreCategoria VARCHAR2(50),
    DescripcionCategoria CLOB,
    PRIMARY KEY (ID_Categoria)
);


CREATE TABLE Producto (
    ID_Producto NUMBER NOT NULL GENERATED BY DEFAULT ON NULL AS IDENTITY,
    ID_Categoria NUMBER,
    ID_Proveedor NUMBER,
    Nombre VARCHAR2(50),
    Cantidad NUMBER NOT NULL,
    Precio NUMBER(7,2) CHECK (Precio > 0),
    PRIMARY KEY (ID_Producto),
    CONSTRAINT fk_producto_categoria FOREIGN KEY (ID_Categoria) REFERENCES CategoriaProducto(ID_Categoria),
    CONSTRAINT fk_producto_proveedor FOREIGN KEY (ID_Proveedor) REFERENCES Proveedor(ID_Proveedor)
);

CREATE TABLE Persona (
    ID_Persona NUMBER NOT NULL GENERATED BY DEFAULT ON NULL AS IDENTITY,
    Nombre VARCHAR2(50),
    Apellido VARCHAR2(50),
    Cedula NUMBER(20),
    Direccion VARCHAR2(100),
    Email VARCHAR2(50),
    Telefono NUMBER(20),
    PRIMARY KEY (ID_Persona)
);

-- Crear la tabla Proveedor
CREATE TABLE Proveedor (
    ID_Proveedor NUMBER NOT NULL GENERATED BY DEFAULT ON NULL AS IDENTITY,
    ID_Persona NUMBER,
    PRIMARY KEY (ID_Proveedor),
    CONSTRAINT fk_proveedor_persona FOREIGN KEY (ID_Persona) REFERENCES Persona(ID_Persona)
);

-- Crear la tabla Cliente
CREATE TABLE Cliente (
    ID_Cliente NUMBER NOT NULL GENERATED BY DEFAULT ON NULL AS IDENTITY,
    ID_Persona NUMBER,
    PRIMARY KEY (ID_Cliente),
    CONSTRAINT fk_cliente_persona FOREIGN KEY (ID_Persona) REFERENCES Persona(ID_Persona)
);

-- Crear la tabla Empleado
CREATE TABLE Empleado (
    ID_Empleado NUMBER NOT NULL GENERATED BY DEFAULT ON NULL AS IDENTITY,
    ID_Proveedor NUMBER,
    ID_Persona NUMBER,
    PRIMARY KEY (ID_Empleado),
    CONSTRAINT fk_empleado_proveedor FOREIGN KEY (ID_Proveedor) REFERENCES Proveedor(ID_Proveedor),
    CONSTRAINT fk_empleado_persona FOREIGN KEY (ID_Persona) REFERENCES Persona(ID_Persona)
);

-- Crear la tabla Venta
CREATE TABLE Venta (
    ID_Venta NUMBER NOT NULL GENERATED BY DEFAULT ON NULL AS IDENTITY,
    ID_Producto NUMBER,
    ID_Cliente NUMBER,
    Fecha DATE NOT NULL,
    Cantidad NUMBER CHECK (Cantidad > 0),
    Total NUMBER NOT NULL,
    PRIMARY KEY (ID_Venta),
    CONSTRAINT fk_venta_producto FOREIGN KEY (ID_Producto) REFERENCES Producto(ID_Producto),
    CONSTRAINT fk_venta_cliente FOREIGN KEY (ID_Cliente) REFERENCES Cliente(ID_Cliente)
);

-- Crear la tabla Tienda
CREATE TABLE Tienda (
    ID_Tienda NUMBER NOT NULL GENERATED BY DEFAULT ON NULL AS IDENTITY,
    Encargado NUMBER,
    Nombre_Tienda VARCHAR2(30),
    Cantidad_Empleados NUMBER,
    Ubicacion VARCHAR2(50),
    PRIMARY KEY (ID_Tienda),
    CONSTRAINT fk_tienda_encargado FOREIGN KEY (Encargado) REFERENCES Empleado(ID_Empleado)
);

CREATE TABLE Distribuidor (
    ID_Distribuidor NUMBER NOT NULL GENERATED BY DEFAULT ON NULL AS IDENTITY,
    ID_Empleado NUMBER,
    ID_Proveedor NUMBER,
    ID_Producto NUMBER,
    PRIMARY KEY (ID_Distribuidor),
    CONSTRAINT fk_distribuidor_empleado FOREIGN KEY (ID_Empleado) REFERENCES Empleado(ID_Empleado),
    CONSTRAINT fk_distribuidor_proveedor FOREIGN KEY (ID_Proveedor) REFERENCES Proveedor(ID_Proveedor),
    CONSTRAINT fk_distribuidor_producto FOREIGN KEY (ID_Producto) REFERENCES Producto(ID_Producto)
);

-- Crear la tabla PedidoDistribuidor
CREATE TABLE PedidoDistribuidor (
    ID_Pedido NUMBER NOT NULL GENERATED BY DEFAULT ON NULL AS IDENTITY,
    ID_Distribuidor NUMBER,
    Cantidad_Pedido NUMBER NOT NULL,
    PRIMARY KEY (ID_Pedido),
    CONSTRAINT fk_pedido_distribuidor FOREIGN KEY (ID_Distribuidor) REFERENCES Distribuidor(ID_Distribuidor)
);

-- Crear la vista ProductosConCategoria
CREATE VIEW Vista_ProductosConCategoria AS
SELECT
    PR.ID_Producto,
    PR.Nombre AS Nombre_Producto,
    PR.Cantidad,
    PR.Precio,
    C.NombreCategoria AS Nombre_Categoria
FROM Producto PR
JOIN CategoriaProducto C ON PR.ID_Categoria = C.ID_Categoria;

-- Crear la vista VentasConDetalles
CREATE VIEW Vista_VentasConDetalles AS
SELECT
    VE.ID_Venta,
    VE.Fecha,
    VE.Cantidad,
    CL.Nombre AS Nombre_Cliente,
    PR.Nombre AS Nombre_Producto
FROM Venta VE
JOIN Cliente CL ON VE.ID_Cliente = CL.ID_Cliente
JOIN Producto PR ON VE.ID_Producto = PR.ID_Producto;

-- Crear la vista EmpleadosConProveedor
CREATE VIEW Vista_EmpleadosConProveedor AS
SELECT
    E.ID_Empleado,
    PD.Nombre AS Nombre_Proveedor,
    PE.Nombre AS Nombre_Persona
FROM Empleado E
JOIN Proveedor PD ON E.ID_Proveedor = PD.ID_Proveedor
JOIN Persona PE ON E.ID_Persona = PE.ID_Persona;

-- Crear la vista Personas
CREATE VIEW Vista_Personas AS
SELECT
    PE.ID_Persona,
    PE.Nombre,
    PE.Apellido,
    PE.Cedula,
    PE.Direccion,
    PE.Email,
    PE.Telefono
FROM Persona PE;

-- Crear la vista TiendasConEncargado
CREATE VIEW Vista_TiendasConEncargado AS
SELECT
    T.ID_Tienda,
    T.Nombre_Tienda,
    T.Cantidad_Empleados,
    T.Ubicacion,
    E.ID_Empleado AS ID_Empleado
FROM Tienda T
JOIN Empleado E ON T.Encargado = E.ID_Empleado;

-- Crear la vista PedidosConDetalles
CREATE VIEW Vista_PedidosConDetalles AS
SELECT
    PP.ID_Pedido,
    PP.Cantidad_Pedido,
    D.ID_Distribuidor,
    E.Nombre AS Nombre_Empleado,
    P.Nombre AS Nombre_Producto,
    PR.Nombre AS Nombre_Proveedor
FROM PedidoDistribuidor PP
JOIN Distribuidor D ON PP.ID_Distribuidor = D.ID_Distribuidor
JOIN Empleado E ON D.ID_Empleado = E.ID_Empleado
JOIN Producto P ON D.ID_Producto = P.ID_Producto
JOIN Proveedor PR ON D.ID_Proveedor = PR.ID_Proveedor;

-- Crear índices
CREATE INDEX idx_CategoriaNombre ON CategoriaProducto(NombreCategoria);
CREATE INDEX idx_ProductoNombre ON Producto(Nombre);
CREATE INDEX idx_ProductoProveedor ON Producto(ID_Proveedor);
CREATE INDEX idx_ClienteNombre ON Cliente(Nombre);
CREATE INDEX idx_EmpleadoProveedor ON Empleado(ID_Proveedor);

-- Crear trigger para actualizar inventario después de una venta
CREATE OR REPLACE TRIGGER actualizar_inventario_despues_de_venta
AFTER INSERT ON Venta
FOR EACH ROW
BEGIN
    UPDATE Producto
    SET Cantidad = Cantidad - :NEW.Cantidad
    WHERE ID_Producto = :NEW.ID_Producto;
END;
/

-- Crear procedimiento para agregar un cliente
CREATE OR REPLACE PROCEDURE AgregarCliente(
    nombre_cliente IN VARCHAR2,
    direccion_cliente IN VARCHAR2
)
IS
BEGIN
    INSERT INTO Cliente (Nombre, Direccion)
    VALUES (nombre_cliente, direccion_cliente);
END;
/

-- Crear procedimiento para actualizar un cliente
CREATE OR REPLACE PROCEDURE ActualizarCliente(
    id_cliente IN NUMBER,
    nuevo_nombre_cliente IN VARCHAR2,
    nueva_direccion_cliente IN VARCHAR2
)
IS
BEGIN
    UPDATE Cliente
    SET Nombre = nuevo_nombre_cliente,
        Direccion = nueva_direccion_cliente
    WHERE ID_Cliente = id_cliente;
END;
/

-- Consulta para obtener el total de productos vendidos
SELECT
    P.Nombre AS Nombre_Producto,
    SUM(V.Cantidad) AS Total_Vendido
FROM Venta V
JOIN Producto P ON V.ID_Producto = P.ID_Producto
GROUP BY P.Nombre;