-- Crear la tabla CategoriaProducto
CREATE TABLE CategoriaProducto (
    ID_Categoria NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    NombreCategoria VARCHAR2(50),
    DescripcionCategoria CLOB,
    PRIMARY KEY (ID_Categoria)
);

-- Crear la tabla Producto
CREATE TABLE Producto (
    ID_Producto NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    ID_Categoria NUMBER,
    ID_Proveedor NUMBER,
    Nombre VARCHAR2(50),
    Cantidad NUMBER NOT NULL,
    Precio NUMBER(5,2),
    PRIMARY KEY (ID_Producto),
    CONSTRAINT fk_producto_categoria FOREIGN KEY (ID_Categoria) REFERENCES CategoriaProducto(ID_Categoria),
    CONSTRAINT fk_producto_proveedor FOREIGN KEY (ID_Proveedor) REFERENCES Proveedor(ID_Proveedor)
);

--- Crear la tabla Cliente
CREATE TABLE Cliente (
    ID_Cliente NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    Nombre VARCHAR2(50),
    Direccion VARCHAR2(100),
    PRIMARY KEY (ID_Cliente)
);

-- Crear la tabla Venta
CREATE TABLE Venta (
    ID_Venta NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    ID_Producto NUMBER,
    Cantidad NUMBER NOT NULL,
    PrecioVenta NUMBER(5,2),
    FechaVenta DATE DEFAULT SYSDATE,
    PRIMARY KEY (ID_Venta),
    CONSTRAINT fk_venta_producto FOREIGN KEY (ID_Producto) REFERENCES Producto(ID_Producto)
);

-- Procedimiento almacenado para agregar cliente
CREATE OR REPLACE PROCEDURE AgregarCliente(
    nombre_cliente IN VARCHAR2,
    direccion_cliente IN VARCHAR2
)
AS
BEGIN
    INSERT INTO Cliente (Nombre, Direccion)
    VALUES (nombre_cliente, direccion_cliente);
END AgregarCliente;

-- Procedimiento almacenado para actualizar cliente
CREATE OR REPLACE PROCEDURE ActualizarCliente(
    id_cliente IN NUMBER,
    nuevo_nombre_cliente IN VARCHAR2,
    nueva_direccion_cliente IN VARCHAR2
)
AS
BEGIN
    UPDATE Cliente
    SET Nombre = nuevo_nombre_cliente,
        Direccion = nueva_direccion_cliente
    WHERE ID_Cliente = id_cliente;
END ActualizarCliente;

-- Procedimiento almacenado para eliminar cliente
CREATE OR REPLACE PROCEDURE EliminarCliente(
    id_cliente IN NUMBER
)
AS
BEGIN
    DELETE FROM Cliente
    WHERE ID_Cliente = id_cliente;
END EliminarCliente;

-- Disparador para actualizar inventario después de una venta
CREATE OR REPLACE TRIGGER actualizar_inventario_despues_de_venta
AFTER INSERT ON Venta
FOR EACH ROW 
BEGIN
    UPDATE Producto
    SET Cantidad = Cantidad - :NEW.Cantidad
    WHERE ID_Producto = :NEW.ID_Producto;
END actualizar_inventario_despues_de_venta;

-- Consulta para generar informe de ventas de un producto
CREATE OR REPLACE VIEW Informe_Ventas_Producto AS
SELECT 
    P.Nombre AS Nombre_Producto,
    V.Cantidad,
    V.PrecioVenta,
    V.FechaVenta
FROM Venta V
JOIN Producto P ON V.ID_Producto = P.ID_Producto;

-- Consulta para generar informe de ventas totales de un periodo
CREATE OR REPLACE VIEW Informe_Ventas_Totales AS
SELECT 
    SUM(Cantidad) AS Total_Vendido,
    SUM(Cantidad * PrecioVenta) AS Ingresos_Totales
FROM Venta;
